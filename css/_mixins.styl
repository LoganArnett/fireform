@import "_variables"



// ----------------------------------------------------------------------------
// Mixins from https://github.com/jenius/axis
// ----------------------------------------------------------------------------

if (relative-font-sizing) and (not -relative-unit(font-unit))
  warn('relative-font-sizing is true but font-unit is set to ' + font-unit + ' which is not a relative unit.')

establish-baseline(fs = base-font-size)
  if fs is a 'unit'
    // IE 6 refuses to resize fonts set in pixels and it weirdly resizes fonts
    // whose root is set in ems. So we set the root font size in percentages of
    // the default font size.
    * html
      font-size: 100% * (fs / browser-default-font-size)
    html
      font-size: fs
      adjust-leading-to: 1, relative-font-sizing ? fs : base-font-size

  else if (fs is a 'string') and (fs is 'normalize')
    baseline-normalize()

  else
    warn('Invalid parameter ' + fs + ' passed to establish-baseline().')


// Show a background image that can be used to debug your alignments.
// Requires internet connection
// TODO: Make a better version of this
debug-vertical-alignment()
  background-image: url('http://basehold.it/i/' + unit(base-line-height, ''))

// Adjust a block to have a different font size and line height to maintain the
// rhythm. $lines specifies how many multiples of the baseline rhythm each line
// of this font should use up. It does not have to be an integer, but it
// defaults to the smallest integer that is large enough to fit the font.
// Use $from-size to adjust from a font-size other than the base font-size.
adjust-font-size-to(to-size, lines = -lines-for-font-size(to-size), from-size = base-font-size)
  if (not relative-font-sizing) and (from-size is not base-font-size)
    warn('relative-font-sizing is false but a relative font size was passed to adjust-font-size-to')
  font-size: font-unit * (to-size / from-size)
  adjust-leading-to: lines, relative-font-sizing ? to-size : base-font-size

// Adjust a block to have different line height to maintain the rhythm.
// $lines specifies how many multiples of the baseline rhythm each line of this
// font should use up. It does not have to be an integer, but it defaults to the
// smallest integer that is large enough to fit the font.
adjust-leading-to(lines, font-size = base-font-size)
  line-height: -rhythm(lines, font-size)

// Apply leading whitespace. The $property can be margin or padding.
leader(lines = 1, font-size = base-font-size, property = margin)
  {property}-top: -rhythm(lines, font-size)

// Apply leading whitespace as padding.
padding-leader(lines = 1, font-size = base-font-size)
  padding-top: -rhythm(lines, font-size)

// Apply leading whitespace as margin.
margin-leader(lines = 1, font-size = base-font-size)
  margin-top: -rhythm(lines, font-size)

// Apply trailing whitespace. The $property can be margin or padding.
trailer(lines = 1, font-size = base-font-size, property = margin)
  {property}-bottom: -rhythm(lines, font-size)

// Apply trailing whitespace as padding.
padding-trailer(lines = 1, font-size = base-font-size)
  padding-bottom: -rhythm(lines, font-size)

// Apply trailing whitespace as margin.
margin-trailer(lines = 1, font-size = base-font-size)
  margin-bottom: -rhythm(lines, font-size)

// Shorthand mixin to apply whitespace for top and bottom margins and padding.
rhythm(l = 0, pl = 0, pt = 0, t = 0, font-size = base-font-size)
  leader: l, font-size
  padding-leader: pl, font-size
  padding-trailer: pt, font-size
  trailer: t, font-size

// Apply a border and whitespace to any side without destroying the vertical
// rhythm. The whitespace must be greater than the width of the border.
apply-side-rhythm-border(side, w = 1px, lines = 1, font-size = base-font-size, bs = default-rhythm-border-style)
  if (not relative-font-sizing) and (font-size is not base-font-size)
    warn('relative-font-sizing is false but a relative font size was passed to apply-side-rhythm-border')
  border-{side}-style: bs
  border-{side}-width: font-unit * (w / font-size)
  padding-{side}: -rhythm(lines, font-size, offset = w)

// Apply borders and whitespace equally to all sides.
rhythm-borders(w = 1px, lines = 1, font-size = base-font-size, bs = default-rhythm-border-style)
  if (not relative-font-sizing) and (font-size is not base-font-size)
    warn('relative-font-sizing is false but a relative font size was passed to rhythm-borders')
  border-style: bs
  border-width: font-unit * (w / font-size)
  padding: -rhythm(lines, font-size, offset = w)

// Apply a leading border.
leading-border(width = 1px, lines = 1, font-size = base-font-size, border-style = default-rhythm-border-style)
  apply-side-rhythm-border: top, width, lines, font-size, border-style

// Apply a trailing border.
trailing-border(width = 1px, lines = 1, font-size = base-font-size, border-style = default-rhythm-border-style)
  apply-side-rhythm-border: bottom, width, lines, font-size, border-style

// Apply both leading and trailing borders.
horizontal-borders(width = 1px, lines = 1, font-size = base-font-size, border-style = default-rhythm-border-style)
  leading-border: width, lines, font-size, border-style
  trailing-border: width, lines, font-size, border-style

baseline-normalize()
  h1-font-size = 2 * base-font-size
  h2-font-size = 1.5 * base-font-size
  h3-font-size = 1.17 * base-font-size
  h4-font-size = 1 * base-font-size
  h5-font-size = 0.83 * base-font-size
  h6-font-size = 0.67 * base-font-size
  base-font-family = sans-serif
  indent-amount = 40px